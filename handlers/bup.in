# -*- mode: sh; sh-basic-offset: 3; indent-tabs-mode: nil; -*-
# vim: set filetype=sh sw=3 sts=3 expandtab autoindent:
#
# bup handler script for backupninja
# requires the bup binary, and ssh for remote connections
#

### FUNCTIONS ###

if [ -z "$BUP" ]; then
   if [ -x /usr/bin/bup ]; then
      BUP=/usr/bin/bup
   else
      fatal "executable path not defined in 'BUP' configuration option"
   fi
fi
[ -x "$BUP" ] || fatal "bup executable path is not executable or does not exist."

function bup_version() {
   # given no arguments, returns the local version.
   # given a user and host, returns the remote version.
   # if user or host is missing, returns the local version.
   local version
   if [ "$#" -lt 2 ]; then
      debug "$BUP --version"
      $BUP --version
   else
      local user=$1
      local host=$2
      debug "ssh $host -l $user 'bup --version'"
      version=`ssh $host -l $user "bup --version"`
      if [ $? -ne 0 ]; then
         fatal "Unable to retrieve bup's version tag."
      fi

      echo "$version"
   fi
}

### GET CONFIG ###

getconf ignore_version no
getconf testconnect yes
getconf generate_parity no

setsection source
getconf path
getconf exclude
getconf exclude_rx

setsection dest
getconf bupdir
getconf branch

# See possible values in bup.helper, or in a config file generated by it.
getconf type local; desttype=$type
# The three values below are only useful if the backup is remote, in other
# words, if the type is one of "remote" or "on".
#
# The user is optional. If none is specified, we'll be connecting to remote
# server as the same user as the one running this backup job (most probably
# root) or if you have an entry in your ~/.ssh/config file that specifies a
# user for the host, it will be used.
getconf remote_bupdir
getconf host localhost
getconf user

# We need to export this before verifying bup's version in the CHECK CONFIG
# section since we're calling bup and it will bug us about the default ~/.bup
# location if it doesn't know where its repository is placed.
if [ -n "$bupdir" ]; then
   BUP_DIR="$bupdir"
   export BUP_DIR
   debug "BUP_DIR set to: $bupdir"
fi

### CHECK CONFIG ###
debug "backup type is set to '$desttype'"

[ -n "$test" ] || test=0

if [ -z "$path" ]; then
   fatal "No source path was given."
fi

if [ -z "$branch" ]; then
   fatal "The backup branch was not specified."
fi

if [ -z "$bupdir" ]; then
   debug "No bupdir specified: using the default location of ~/.bup !"
fi

if [ -z "$remote_bupdir" ]; then
   debug "No remote_bupdir specified: using the default location of ~/.bup !"
   remote_bupdir=~/.bup
fi

if [ "$desttype" != "local" ]; then
   [ -n "$user" ] || fatal "Username must be specified for non-local backups."
   [ -n "$host" ] || fatal "Host name must be specified for non-local backups."
fi

if [ "$ignore_version" != "yes" ]; then
   # see that bup has the same version at the source and destination
   if [ "$desttype" != "local" ]; then
      sourceversion=`bup_version`
      destversion=`bup_version $user $host`
      if [ "$sourceversion" != "$destversion" ]; then
         fatal "bup versions mismatch: local version is '$sourceversion' ; remote version is '$destversion'"
      fi
   fi
fi

### REMOVE OLD BACKUPS ###
# This is not yet implemented in bup itself.

### EXECUTE ###
saveifs=$IFS
IFS=$(echo -en "\n\b")
set -o noglob
# includes
path_list=
for i in $path; do
   path_list="${path_list}'${i}' "
done
# excludes
exclude_list=
for i in $exclude; do
   exclude_list="${exclude_list}--exclude '${i}' "
done
# excludes with regexp
exclude_rx_list=
for i in $exclude_rx; do
   exclude_rx_list="${exclude_rx_list}--exclude-rx '${i}' "
done
set +o noglob
IFS=$saveifs

remote_url=
if [ "$desttype" != "local" ]; then
   if [ "$testconnect" = "yes" ] || [ "${test}" -eq 1 ]; then
      ssh_test_connection $user $host
   fi

   remote_url="-r $user@$host:$remote_bupdir"

   if [ "${test}" -eq 0 ]; then
      # Even though we're already doing this in bup.helper, this gives users the
      # possibility to just move the bup repository out of the way in case of
      # corruption and let the next backup run automatically create a new
      # repository.
      #
      # calling bup init on an already existing repository is safe.
      debug "Initializing remote bupdir if it does not exist"
      output=`ssh $user@$host "mkdir -p $remote_bupdir && bup -d '$remote_bupdir' init"`
      if [ "$?" != "0" ]; then
         fatal "An error occurred during repository initialization: $output"
      fi
   fi
fi

if [ "${test}" -eq 0 ]; then
   if [ "$desttype" = "on" ]; then
      debug "$BUP on $user@$host index -u $exclude_list $exclude_rx_list $path_list"
      if output=$($BUP on $user@$host -d "$remote_bupdir" index -u $exclude_list $exclude_rx_list $path_list 2>&1); then
         debug "$output"
         info "Indexing completed successfully"
      else
         warning "$output"
         warning "bup index encountered errors"
      fi

      debug "$BUP on $user@$host save -n $branch $path_list"
      if output=$($BUP on $user@$host -d "$remote_bupdir" save -n $branch $path_list 2>&1); then
         debug "$output"
         info "Successfullly finished backing up"
      else
         warning "$output"
         warning "bup save encountered errors"
      fi
   else
      debug "$BUP index -u $exclude_list $exclude_rx_list $path_list"
      if output=$($BUP index -u $exclude_list $exclude_rx_list $path_list 2>&1); then
         debug "$output"
         info "Indexing completed successfully"
      else
         warning "$output"
         warning "bup index encountered errors"
      fi

      debug "$BUP save $remote_url -n $branch $path_list"
      if output=$($BUP save $remote_url -n $branch $path_list 2>&1); then
         debug "$output"
         info "Successfullly finished backing up"
      else
         warning "$output"
         warning "bup save encountered errors"
      fi
   fi
fi

if [ "$generate_parity" = "yes" ]; then
    debug "$BUP fsck -g"
    if output=$($BUP fsck -g); then
        info "Parity files generated successfully"
    else
        warning "$output"
        warning "Error encountered while generating parity files"
    fi
fi

